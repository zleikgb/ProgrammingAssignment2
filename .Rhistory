x[!c, ]
y <- x[!c, ]
y
cor(y[,2], y[,3])
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
y <- x[!c, ]source("corr.R")
source("complete.R")
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
submit()
submit()
submit()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
id <- 1:10
id
length(id)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 70:72)
a <- "nitrate"
a
class(a)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 70)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 71)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 72)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 71)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 72)
pollutantmean("specdata", "nitrate", 70:72)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
x <- read.csv("D:/Users/Ryan/Documents/GitHub/R_coursera/specdata/001.csv")
c <- is.na(x[,2]) | is.na(x[,3])
y <- x[!c,]
x <- read.csv("D:/Users/Ryan/Documents/GitHub/R_coursera/specdata/002.csv")
c <- is.na(x[,2]) | is.na(x[,3])
y <- x[!c,]
View(y)
View(y)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
View(y)
View(y)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
x <- read.csv("D:/Users/Ryan/Documents/GitHub/R_coursera/specdata/001.csv")
<- read.csv("D:/Users/Ryan/Documents/GitHub/R_coursera/specdata/002.csv")
y <- read.csv("D:/Users/Ryan/Documents/GitHub/R_coursera/specdata/002.csv")
z <- merge(x, y)
z
z <- rbind(x,y)
z
a <- data.frame()
a <- rbind(a, x)
a <- rbind(a, y)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
submit()
submit
submit()
submit()
submit()
submit()
submit()
R.version.string
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
a <- array(rnorm(2 * 2 * 10), C(2, 2, 10))
a <- array(rnorm(2 * 2 * 10), C(2, 2, 10))
mapply(rep, 1:4, 4:1)
rep(4,8)
mapply(noise, 1:5, 1:5, 2)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
apply(x, 1, mean)
apply(x, 1, mean)
f <- gl(3, 10)
f
1/0
log(-1)
library(datasets)
data(iris)
iris
?iris
head(iris)
s <- split(iris, iris$Sepal.Length)
s
s <- split(iris, iris$Sepal.Width)
s
s <- split(iris, iris$Species)
s
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x)
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x))
lapply(s, function(s) colMeans(s))
lapply(s, function(s) colMeans(s))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "sepal.width")]))
View(iris)
View(iris)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "sepal.Width")]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris, 2, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
x <- sapply(split(mtcars$hp, mtcars$cyl), mean)
x(1)-x(3)
x[1]-x[3]
debug(ls)
ls
?mean
x <- c(0:10, 50)
x
xm <- mean(x)
xm
c(xm, mean(x, trim = 0.10))
c(xm, mean(x, trim = 0.50))
c(xm, mean(x, trim = 0.20))
c(xm, mean(x, trim = 0.30))
c(xm, mean(x, trim = 0.01))
solve(x)
a <- c[1:3 4:6]
x
x = matrix()
x
library(makeCacheMatrix)
setwd("~/GitHub")
setwd("~/GitHub")
setwd("~/GitHub/ProgrammingAssignment2")
cachesolve
cachesolve(x)
makeCacheMatrix
x = (1:3, 4:5)
x = (1:3)
x
x = (1:3; 1:3; 1:3)
x = (1:9)
x
solve(x)
x <- matrix(1:9, nrow = 3, nncol = 3)
x <- matrix(1:9, nrow = 3, ncol = 3)
x
solve(x)
x <- matrix(1,1,1,1,1,1,1, nrow = 3, ncol = 3)
x <- matrix(1:10, nrow = 3, ncol = 3)
x
x <- matrix(1:12, nrow = 4, ncol = 3)
x
solve(x)
x <- matrix(1:16, nrow = 4, ncol = 4)
x
solve(x)
?solve
x <- matrix(4:120, nrow = 4, ncol = 4)
x <- matrix(4:20, nrow = 4, ncol = 4)
x
solve(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- funtion (y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(inversion) inv <<- inversion
getinversion <- function() inv
list(set = set, get = get, setinversion = setinversion, getinversion = getinversion)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix
## above. If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinversion()
if(!is.null(inv)) {
message("getting cached data")
return inv
}
data <- x$get()
inv <- solve(data, ...)
x$setinversion(inv)
inv
}
makeCacheMatrix(x)
f <- function(a, b) {
a^2
}
f(2)
set <- funtion (y) {
x <<- y
inv <<- NULL
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function (y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(inversion) inv <<- inversion
getinversion <- function() inv
list(set = set, get = get, setinversion = setinversion, getinversion = getinversion)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinversion()
if(!is.null(inv)) {
message("getting cached data")
return inv
}
data <- x$get()
inv <- solve(data, ...)
x$setinversion(inv)
inv
}
makeCacheMatrix(x)
get
get(x)
x
set(x)
set
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function (y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(inversion) inv <<- inversion
getinversion <- function() inv
list(set = set, get = get, setinversion = setinversion, getinversion = getinversion)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinversion()
if(!is.null(inv)) {
message("getting cached data")
return inv
}
data <- x$get()
inv <- solve(data, ...)
x$setinversion(inv)
inv
}
get(x)
x
x$get()
x <- matrix(76:91, nrow = 4, ncol = 4)
x
solve(x)
m <- solve(x)
m
solve(x, 1)
A=t(array(c(1:8,10),dim=c(3,3)));
A
x <- matrix(c(1:8,10), nrow = 3, ncol = 3)
x
x
solve(x)
makeCacheMatrix(x)
get
set
set(x)
makeCacheMatrix(c(1:8,10), nrow = 3, ncol = 3)
makeCacheMatrix(c(1:8,10))
x
makeCacheMatrix(c(1:8,11))
x
get
get(x)
cacheSolve(x)
makeCacheMatrix <- function(x = numeric()) {
inv <- NULL
set <- function (y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(inversion) inv <<- inversion
getinversion <- function() inv
list(set = set, get = get, setinversion = setinversion, getinversion = getinversion)
}
makeCacheMatrix(x)
x
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinversion()
if(!is.null(inv)) {
message("getting cached data")
return inv
}
data <- x$get()
inv <- solve(data, ...)
x$setinversion(inv)
inv
}
makeCacheMatrix <- function(x = numeric()) {
inv <- NULL
set <- function (y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(inversion) inv <<- inversion
getinversion <- function() inv
list(set = set, get = get, setinversion = setinversion, getinversion = getinversion)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix
## above. If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinversion()
if(!is.null(inv)) {
message("getting cached data")
return inv
}
data <- x$get()
inv <- solve(data, ...)
x$setinversion(inv)
inv
}
makeCacheMatrix <- function(x = numeric()) {
inv <- NULL
set <- function (y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(solve) inv <<- solve
getinversion <- function() inv
list(set = set, get = get, setinversion = setinversion, getinversion = getinversion)
}
makeCacheMatrix(x)
x
get
setinversion()
setinversion(x)
inv
getinversion()
set(x)
makeCacheMatrix <- function(x = numeric()) {
inv <- NULL
set <- function (y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(inversion) inv <<- inversion
getinversion <- function() inv
list(set = set, get = get, setinversion = setinversion, getinversion = getinversion)
}
setinversion(x)
getinversion()
set
get
x
get()
get()
set
get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
get
set
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean
cachemean(x)
a <- c(1:9)
c
a
cachemean(a)
makeVector(a)
get
set
cachemean(a)
data
get
x$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinversion()
if(!is.null(inv)) {
message("getting cached data")
return inv
}
data <- x$get()
inv <- solve(data, ...)
x$setinversion(inv)
inv
}
getinversion()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function (y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(inversion) inv <<- inversion
getinversion <- function() inv
list(set = set, get = get, setinversion = setinversion, getinversion = getinversion)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinversion()
if(!is.null(inv)) {
message("getting cached data")
return inv
}
data <- x$get()
inv <- solve(data, ...)
x$setinversion(inv)
inv
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
x
a
cachemean(a)
